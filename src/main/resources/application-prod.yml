spring:
  config:
    location: file:/config/

  datasource:
    url: ${PROD_DB_URL}
    username: ${PROD_DB_USERNAME}
    password: ${PROD_DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
    hikari:
      connection-timeout: 3000
      maximum-pool-size: 10
  jpa:
    hibernate:
     ddl-auto: create
     # TODO : db 유지를 위해선, 이후에 none으로 고정해야 함.
#      ddl-auto: none


  data:
    redis:
      host: ${PROD_REDIS_HOST}
      port: ${PROD_REDIS_PORT}
      repositories:
        enabled: false
      password: ${PROD_REDIS_PASSWORD}

  cloud:
    aws:
      s3:
        bucket:
          name: ${PROD_S3_BUCKET_NAME}
          region: ${PROD_S3_BUCKET_REGION}
        stack:
          auto: false
      cloud-front:
        domain: ${PROD_CLOUD_FRONT_DOMAIN}
        key-pair-id: ${PROD_CLOUD_FRONT_KEY_PAIR_ID}
        secret:
          region: ${PROD_CLOUD_FRONT_SECRET_REGION}
          name: ${PROD_CLOUD_FRONT_SECRET_NAME}
          key-value-name: ${PROD_CLOUD_FRONT_SECRET_KEY_VALUE_NAME}
        url-expiration-minutes: ${PROD_CLOUD_FRONT_URL_EXPIRATION_MINUTES}

  cool-sms:
    api-key: ${PROD_SMS_API_KEY}
    api-secret: ${PROD_SMS_API_SECRET}
    sender-number: ${PROD_SMS_SENDER_NUMBER}

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
      # TODO : qurtz 테이블을 유지하기 위해선, 이후에 never 으로 고정해야 함.
#      initialize-schema: never

server:
  servlet:
    session:
      cookie:
        secure: true
        http-only: true
        same-site: lax

